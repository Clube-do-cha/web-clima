@using Microsoft.AspNetCore.Identity
@inject SignInManager<UserModel> SignInManager
@inject UserManager<UserModel> UserManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            @* Obtenha o usuário atual *@
            @{
                var user = UserManager.GetUserAsync(User).Result;
                var fullName = user?.FullName ?? "Usuário";
            }
            <a class="nav-link text-light" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Bem-vindo(a), @fullName!</a>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-light">Sair</button>
            </form>
        </li>
    }
    else
    {
        @* Verifica se o usuário NÃO está na página de Registro *@
        @if (!Context.Request.Path.Value.Contains("/Account/Register"))
        {
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="Identity" asp-page="/Account/Register">Registre-se</a>
            </li>
        }

        @* Verifica se o usuário NÃO está na página de Login *@
        @if (!Context.Request.Path.Value.Contains("/Account/Login"))
        {
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="Identity" asp-page="/Account/Login">Login</a>
            </li>
        }
    }
</ul>
